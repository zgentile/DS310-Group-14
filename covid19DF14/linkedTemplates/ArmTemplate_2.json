{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "covid19DF14"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/cases_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "metrics_lake",
								"type": "DatasetReference"
							},
							"name": "metrics",
							"description": "Import data from metrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cases_data",
								"type": "DatasetReference"
							},
							"name": "selectedCases"
						}
					],
					"transformations": [
						{
							"name": "Cases"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> metrics",
						"metrics select(mapColumn(",
						"          Date = Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          ISO3,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Cases",
						"Cases sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CountryName as string,",
						"          Date as timestamp,",
						"          C1_School_closing as long,",
						"          C2_Workplace_closing as long,",
						"          C3_Cancel_public_events as long,",
						"          C4_Restrictions_on_gatherings as long,",
						"          C5_Close_public_transport as long,",
						"          C6_Stay_at_home_requirements as long,",
						"          C7_Restrictions_on_internal_movement as long,",
						"          C8_International_travel_controls as long,",
						"          E1_Income_support as long,",
						"          E2_Debt_contract_relief as long,",
						"          E3_Fiscal_measures as long,",
						"          E4_International_support as long,",
						"          H1_Public_information_campaigns as long,",
						"          H2_Testing_policy as long,",
						"          H3_Contact_tracing as long,",
						"          H4_Emergency_investment_in_healthcare as long,",
						"          H5_Investment_in_vaccines as long,",
						"          H6_Facial_Coverings as long,",
						"          H7_Vaccination_policy as long,",
						"          H8_Protection_of_elderly_people as long,",
						"          StringencyIndex as long,",
						"          GovernmentResponseIndex as long,",
						"          ContainmentHealthIndex as long,",
						"          EconomicSupportIndex as long",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['cases_data.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> selectedCases"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deaths_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "metrics_lake",
								"type": "DatasetReference"
							},
							"name": "metrics",
							"description": "Import data from metrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "deaths_data",
								"type": "DatasetReference"
							},
							"name": "selectedDeaths"
						}
					],
					"transformations": [
						{
							"name": "Deaths"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> metrics",
						"metrics select(mapColumn(",
						"          Date = Updated,",
						"          Deaths,",
						"          Deaths_Change,",
						"          ISO3,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Deaths",
						"Deaths sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Date as timestamp,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          ISO3 as string,",
						"          Country_Region as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['deaths_data.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> selectedDeaths"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/geography_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "sqlCountriesLake",
								"type": "DatasetReference"
							},
							"name": "sqlCountries"
						},
						{
							"dataset": {
								"referenceName": "azsqlCountriesLake",
								"type": "DatasetReference"
							},
							"name": "azsqlCountries"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MergedCountries",
								"type": "DatasetReference"
							},
							"name": "MergedCountriesSink"
						}
					],
					"transformations": [
						{
							"name": "CountriesUnion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> sqlCountries",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> azsqlCountries",
						"sqlCountries, azsqlCountries union(byName: true,",
						"     partitionBy('hash', 1))~> CountriesUnion",
						"CountriesUnion sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['MergedCountries.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MergedCountriesSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/metrics_union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "metrics_data_lake",
								"type": "DatasetReference"
							},
							"name": "sqlMetrics"
						},
						{
							"dataset": {
								"referenceName": "azsql_metrics_data_lake",
								"type": "DatasetReference"
							},
							"name": "azsqlMetrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "unioned_data",
								"type": "DatasetReference"
							},
							"name": "MergedMetricsSink"
						}
					],
					"transformations": [
						{
							"name": "MetricsUnion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> sqlMetrics",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> azsqlMetrics",
						"sqlMetrics, azsqlMetrics union(byName: true,",
						"     partitionBy('hash', 1))~> MetricsUnion",
						"MetricsUnion sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['MergedMetrics.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MergedMetricsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/policy_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "policy_lake",
								"type": "DatasetReference"
							},
							"name": "policy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "selected_policy_data",
								"type": "DatasetReference"
							},
							"name": "selectedPolicies"
						}
					],
					"transformations": [
						{
							"name": "selectPolicies"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as timestamp,",
						"          C1_School_closing as long,",
						"          C1_Flag as long,",
						"          C2_Workplace_closing as long,",
						"          C2_Flag as long,",
						"          C3_Cancel_public_events as long,",
						"          C3_Flag as long,",
						"          C4_Restrictions_on_gatherings as long,",
						"          C4_Flag as long,",
						"          C5_Close_public_transport as long,",
						"          C5_Flag as long,",
						"          C6_Stay_at_home_requirements as long,",
						"          C6_Flag as long,",
						"          C7_Restrictions_on_internal_movement as long,",
						"          C7_Flag as long,",
						"          C8_International_travel_controls as long,",
						"          E1_Income_support as long,",
						"          E1_Flag as long,",
						"          E2_Debt_contract_relief as long,",
						"          E3_Fiscal_measures as long,",
						"          E4_International_support as long,",
						"          H1_Public_information_campaigns as long,",
						"          H1_Flag as long,",
						"          H2_Testing_policy as long,",
						"          H3_Contact_tracing as long,",
						"          H4_Emergency_investment_in_healthcare as long,",
						"          H5_Investment_in_vaccines as long,",
						"          H6_Facial_Coverings as long,",
						"          H6_Flag as long,",
						"          H7_Vaccination_policy as long,",
						"          H7_Flag as long,",
						"          H8_Protection_of_elderly_people as long,",
						"          H8_Flag as long,",
						"          M1_Wildcard as long,",
						"          StringencyIndex as long,",
						"          StringencyIndexForDisplay as long,",
						"          StringencyLegacyIndex as long,",
						"          StringencyLegacyIndexForDisplay as long,",
						"          GovernmentResponseIndex as long,",
						"          GovernmentResponseIndexForDisplay as long,",
						"          ContainmentHealthIndex as long,",
						"          ContainmentHealthIndexForDisplay as long,",
						"          EconomicSupportIndex as long,",
						"          EconomicSupportIndexForDisplay as long,",
						"          id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> policy",
						"policy select(mapColumn(",
						"          CountryName,",
						"          Date,",
						"          C1_School_closing,",
						"          C2_Workplace_closing,",
						"          C3_Cancel_public_events,",
						"          C4_Restrictions_on_gatherings,",
						"          C5_Close_public_transport,",
						"          C6_Stay_at_home_requirements,",
						"          C7_Restrictions_on_internal_movement,",
						"          C8_International_travel_controls,",
						"          E1_Income_support,",
						"          E2_Debt_contract_relief,",
						"          E3_Fiscal_measures,",
						"          E4_International_support,",
						"          H1_Public_information_campaigns,",
						"          H2_Testing_policy,",
						"          H3_Contact_tracing,",
						"          H4_Emergency_investment_in_healthcare,",
						"          H5_Investment_in_vaccines,",
						"          H6_Facial_Coverings,",
						"          H7_Vaccination_policy,",
						"          H8_Protection_of_elderly_people,",
						"          StringencyIndex,",
						"          GovernmentResponseIndex,",
						"          ContainmentHealthIndex,",
						"          EconomicSupportIndex",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPolicies",
						"selectPolicies sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['selectedpolicy.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> selectedPolicies"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/recoveries_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "metrics_lake",
								"type": "DatasetReference"
							},
							"name": "metrics",
							"description": "Import data from metrics"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "recoveries_data",
								"type": "DatasetReference"
							},
							"name": "selectedRecoveries"
						}
					],
					"transformations": [
						{
							"name": "Recoveries"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> metrics",
						"metrics select(mapColumn(",
						"          Updated,",
						"          Recovered,",
						"          Recovered_Change,",
						"          ISO3,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Recoveries",
						"Recoveries sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Date as timestamp,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          ISO3 as string,",
						"          Country_Region as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['recoveries_data.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> selectedRecoveries"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/merging_countries')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge Countries",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "geography_union",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlCountries": {},
									"azsqlCountries": {},
									"MergedCountriesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/geography_union')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/merging_metrics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge Metrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "metrics_union",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlMetrics": {},
									"azsqlMetrics": {},
									"MergedMetricsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/metrics_union')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_cases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "metrics",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cases_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"metrics": {},
									"selectedCases": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/cases_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_deaths')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "deaths_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"metrics": {},
									"selectedDeaths": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/deaths_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_policies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select_policies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "policy_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"policy": {},
									"selectedPolicies": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/policy_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_recoveries')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "recoveries",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "recoveries_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"metrics": {},
									"selectedRecoveries": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/recoveries_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data-Country",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "country_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "country_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data-Metrics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "metrics_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "metrics_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data-Dates",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dates_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dates_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-03T23:24:03Z"
			},
			"dependsOn": []
		}
	]
}